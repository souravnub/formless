// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(cuid())
  name           String
  email          String             @unique
  password       String
  role           RoleType           @default(USER)
  FormsCreated   Form[]
  FormSubmission FormSubmission[]
  Log            Log[]
  Notifications  UserNotification[]
}

model Form {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  createdBy   String
  user        User             @relation(fields: [createdBy], references: [id])
  updatedAt   DateTime         @updatedAt
  title       String
  description String
  schema      Json
  uiSchema    Json?
  submissions FormSubmission[]
  role        RoleType
}

model FormSubmission {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  submissions Json
  user        User     @relation(fields: [userId], references: [id])
  form        Form     @relation(fields: [formId], references: [id])
  formId      String
  userId      String
}

model UserRequest {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  info       Json
  action     Action
  objectType ObjectType
  objectId   String
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  prevState  Json
}

model UserNotification {
  isArchived     Boolean
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())

  @@id([notificationId, userId])
}

model Notification {
  id          String           @id @default(cuid())
  description String
  type        NotificationType
  link        String

  userNotifications UserNotification[]
}

enum Action {
  CREATE
  UPDATE
  DELETE
  SUBMIT
  APPROVE
  DENY
}

enum ObjectType {
  FORM
  FORM_SUBMISSION
  USER
  USER_REQUEST
}

enum RoleType {
  USER
  ADMIN
  SUPERVISOR
}

enum NotificationType {
  WARNING
  ERROR
  REMINDER
  INFO
}
